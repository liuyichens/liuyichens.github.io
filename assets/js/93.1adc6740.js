(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{578:function(t,v,_){"use strict";_.r(v);var s=_(31),a=Object(s.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"http和https"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http和https"}},[t._v("#")]),t._v(" HTTP和HTTPS")]),t._v(" "),_("h3",{attrs:{id:"http和https的基本概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http和https的基本概念"}},[t._v("#")]),t._v(" HTTP和HTTPS的基本概念")]),t._v(" "),_("p",[t._v("http: 是一个客户端和服务端请求和应答的标准(TCP)，用于从www服务器传输超文本到本地浏览器的超文本传输协议。")]),t._v(" "),_("p",[t._v("https: 是以安全为目标的HTTP通道，即HTTP下加入SSL层进行加密。作用是建立一个信息安全通道，来确保数据的传输，确保网站的真实性。")]),t._v(" "),_("h3",{attrs:{id:"http和https的区别及优缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http和https的区别及优缺点"}},[t._v("#")]),t._v(" http和https的区别及优缺点")]),t._v(" "),_("ul",[_("li",[t._v("http是超文本传输协议，"),_("strong",[t._v("信息是明文传输")]),t._v("，HTTPS协议比HTTP协议更安全，"),_("strong",[t._v("HTTPS是具有安全性的SSL加密传输协议")]),t._v("，可方式数据在传输过程中被窃取、修改，确保数据的完整性(当然安全性并不是绝对的)")]),t._v(" "),_("li",[t._v("http协议的默认端口是"),_("code",[t._v("80")]),t._v("，https默认的端口是"),_("code",[t._v("443")])]),t._v(" "),_("li",[t._v("http的连接很简单，是无状态的。https握手阶段比较费时间，会使页面加载时间延长50%，增加10%~20%的耗电")]),t._v(" "),_("li",[t._v("https缓存不如http高效，会增加数据开销")]),t._v(" "),_("li",[t._v("https协议需要"),_("strong",[t._v("ca证书")]),t._v("，费用较高，功能越强大的证书费用越高。")]),t._v(" "),_("li",[t._v("SSL证书需要绑定IP，不能在同一个IP上绑定多个域名，IPV4资源不能支持这种消耗。")])]),t._v(" "),_("h3",{attrs:{id:"https协议工作的原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#https协议工作的原理"}},[t._v("#")]),t._v(" https协议工作的原理")]),t._v(" "),_("p",[t._v("客户端在使用HTTPS方式与Web服务器通行时有以下几个步骤")]),t._v(" "),_("ol",[_("li",[t._v("客户端使用https url 访问服务器，则要求web服务器建立ssl链接")]),t._v(" "),_("li",[t._v("web服务器接收到客户端的请求后，会将网站的证书(证书中包含了公钥)传输给客户端。")]),t._v(" "),_("li",[t._v("客户端和Web服务器端开始协商SSL链接的安全等级，也就是加密等级。")]),t._v(" "),_("li",[t._v("客户端浏览器通过双方协商一直的安全等级，建立会话密钥，然后通过网站的公钥和加密会话密钥，并传送网站。")]),t._v(" "),_("li",[t._v("web服务器通过自己的私钥解密出会话密钥。")]),t._v(" "),_("li",[t._v("web服务器通过会话密钥加密与客户端之间的通信")])]),t._v(" "),_("h2",{attrs:{id:"tcp三次握手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp三次握手"}},[t._v("#")]),t._v(" TCP三次握手")]),t._v(" "),_("ol",[_("li",[t._v("第一次握手：建立连接时，客户端发送"),_("code",[t._v("syn")]),t._v("包(syn=j)到服务器，并进入"),_("code",[t._v("SYN_SENT")]),t._v("状态，等待服务器确认；（SYN：同步序列编号(Synchronize Sequence Numbers)）")]),t._v(" "),_("li",[t._v("第二次握手：服务器收到"),_("code",[t._v("syn")]),t._v("包并确认客户的syn(ack=j+1)，同时也发送一个自己的SYN包(syn=k)，即SYN+ACK包，此时服务器进入"),_("code",[t._v("SYN_RECV")]),t._v("状态。")]),t._v(" "),_("li",[t._v("第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED(TCP连接成功)状态，完成三次握手。")])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),_("p",[t._v("握手过程中传送的包不包含数据，三次握手完毕后，客户端和服务器开始正式传送数据")])]),t._v(" "),_("h2",{attrs:{id:"tcp四次挥手"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp四次挥手"}},[t._v("#")]),t._v(" TCP四次挥手")]),t._v(" "),_("ol",[_("li",[t._v("客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u(等于前面已经传送过来的数据的最后一个字节的序号加1)，此时，客户端进入FIN-WAIT-1(终止等待1)状态。TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。")]),t._v(" "),_("li",[t._v("服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT(关闭等待)状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受，这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。")]),t._v(" "),_("li",[t._v("客户端接收到服务器的确认后，此时，客户端进入FIN-WAIT-2(终止等待2)状态，等待服务器发送连接释放报文(在此之前还需要接受服务器发送的最后的数据)")])])])}),[],!1,null,null,null);v.default=a.exports}}]);